openapi: 3.0.2
info:
  title: ''
  version: ''
paths:
  /api/v2/podcasts/:
    get:
      operationId: listPodcasts
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Podcast'
          description: ''
      tags:
      - api
    post:
      operationId: createPodcast
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Podcast'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Podcast'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Podcast'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Podcast'
          description: ''
      tags:
      - api
  /api/v2/podcasts/{id}/:
    get:
      operationId: retrievePodcast
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this podcast.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Podcast'
          description: ''
      tags:
      - api
    put:
      operationId: updatePodcast
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this podcast.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Podcast'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Podcast'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Podcast'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Podcast'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdatePodcast
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this podcast.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Podcast'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Podcast'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Podcast'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Podcast'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyPodcast
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this podcast.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/v2/episodes/:
    get:
      operationId: listEpisodes
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Episode'
          description: ''
      tags:
      - api
    post:
      operationId: createEpisode
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Episode'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Episode'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Episode'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Episode'
          description: ''
      tags:
      - api
  /api/v2/episodes/{id}/:
    get:
      operationId: retrieveEpisode
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this episode.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Episode'
          description: ''
      tags:
      - api
    put:
      operationId: updateEpisode
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this episode.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Episode'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Episode'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Episode'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Episode'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateEpisode
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this episode.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Episode'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Episode'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Episode'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Episode'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyEpisode
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this episode.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/v2/podcasts/{id}/episodes:
    get:
      operationId: listEpisodes
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Episode'
          description: ''
      tags:
      - api
    post:
      operationId: createEpisode
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Episode'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Episode'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Episode'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Episode'
          description: ''
      tags:
      - api
  /api/v2/podcasts/categories/{category_slug}:
    get:
      operationId: retrievepodcast_list_by_categories
      description: ''
      parameters:
      - name: category_slug
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
  /api/v2/episodes/tags/{tag_slug}:
    get:
      operationId: retrieveepisode_list_by_tags
      description: ''
      parameters:
      - name: tag_slug
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
  /api/v2/users/:
    get:
      operationId: listUsers
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
      tags:
      - api
    post:
      operationId: createUser
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - api
  /api/v2/users/{username}/:
    get:
      operationId: retrieveUser
      description: ''
      parameters:
      - name: username
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - api
    put:
      operationId: updateUser
      description: ''
      parameters:
      - name: username
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateUser
      description: ''
      parameters:
      - name: username
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - api
  /api/v2/users/{username}/followers/:
    get:
      operationId: listUsers
      description: ''
      parameters:
      - name: username
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
      tags:
      - api
  /api/v2/users/{username}/following/:
    get:
      operationId: listUsers
      description: ''
      parameters:
      - name: username
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
      tags:
      - api
  /api/v2/users/{username}/podcasts/:
    get:
      operationId: listPodcasts
      description: ''
      parameters:
      - name: username
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Podcast'
          description: ''
      tags:
      - api
  /api/auth/logout/:
    get:
      operationId: listLogouts
      description: 'Calls Django logout method and delete the Token object

        assigned to the current User object.


        Accepts/Returns nothing.'
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ''
      tags:
      - api
    post:
      operationId: createLogout
      description: 'Calls Django logout method and delete the Token object

        assigned to the current User object.


        Accepts/Returns nothing.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
  /api/auth/user/:
    get:
      operationId: retrieveUserDetails
      description: 'Reads and updates UserModel fields

        Accepts GET, PUT, PATCH methods.


        Default accepted fields: username, first_name, last_name

        Default display fields: pk, username, email, first_name, last_name

        Read-only fields: pk, email


        Returns UserModel fields.'
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
      tags:
      - api
    put:
      operationId: updateUserDetails
      description: 'Reads and updates UserModel fields

        Accepts GET, PUT, PATCH methods.


        Default accepted fields: username, first_name, last_name

        Default display fields: pk, username, email, first_name, last_name

        Read-only fields: pk, email


        Returns UserModel fields.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDetails'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateUserDetails
      description: 'Reads and updates UserModel fields

        Accepts GET, PUT, PATCH methods.


        Default accepted fields: username, first_name, last_name

        Default display fields: pk, username, email, first_name, last_name

        Read-only fields: pk, email


        Returns UserModel fields.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDetails'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
      tags:
      - api
  /api/auth/password/reset/:
    post:
      operationId: createPasswordReset
      description: 'Calls Django Auth PasswordResetForm save method.


        Accepts the following POST parameters: email

        Returns the success/fail message.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordReset'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordReset'
          description: ''
      tags:
      - api
  /api/auth/password/reset/confirm/:
    post:
      operationId: createPasswordResetConfirm
      description: "Password reset e-mail link is confirmed, therefore\nthis resets\
        \ the user's password.\n\nAccepts the following POST parameters: token, uid,\n\
        \    new_password1, new_password2\nReturns the success/fail message."
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetConfirm'
          description: ''
      tags:
      - api
  /api/auth/login/:
    post:
      operationId: createLogin
      description: 'Check the credentials and return the REST Token

        if the credentials are valid and authenticated.

        Calls Django Auth login method to register User ID

        in Django session framework


        Accept the following POST parameters: username, password

        Return the REST Framework Token Object''s key.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
          description: ''
      tags:
      - api
  /api/auth/password/change/:
    post:
      operationId: createPasswordChange
      description: 'Calls Django Auth SetPasswordForm save method.


        Accepts the following POST parameters: new_password1, new_password2

        Returns the success/fail message.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordChange'
          description: ''
      tags:
      - api
  /api/auth/signup/:
    post:
      operationId: createRegister
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
          description: ''
      tags:
      - api
  /api/auth/signup/verify-email/:
    post:
      operationId: createVerifyEmail
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyEmail'
          description: ''
      tags:
      - api
  /api/auth/signup/resend-email/:
    post:
      operationId: createEmailAddress
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendEmailVerification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResendEmailVerification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResendEmailVerification'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResendEmailVerification'
          description: ''
      tags:
      - api
components:
  schemas:
    Podcast:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        creator:
          type: string
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
        cover_image:
          type: string
          format: binary
        categories:
          type: array
          items:
            type: string
        publish:
          type: string
          format: date-time
        status:
          enum:
          - private
          - public
          type: string
      required:
      - title
      - categories
    Episode:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        audio_file:
          type: string
          format: binary
        audio_duration:
          type: integer
          nullable: true
        audio_size:
          type: integer
          nullable: true
        podcast:
          type: integer
        tags:
          type: array
          items:
            type: string
        publish:
          type: string
          format: date-time
        description:
          type: string
        status:
          enum:
          - draft
          - published
          type: string
      required:
      - title
      - podcast
      - tags
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+\z
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        profile:
          type: object
          properties:
            date_of_birth:
              type: string
              format: date
              nullable: true
            photo:
              type: string
              format: binary
      required:
      - username
      - profile
    UserDetails:
      type: object
      properties:
        pk:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+\z
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - username
    PasswordReset:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PasswordResetConfirm:
      type: object
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
        uid:
          type: string
        token:
          type: string
      required:
      - new_password1
      - new_password2
      - uid
      - token
    Login:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
      - password
    PasswordChange:
      type: object
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
      required:
      - new_password1
      - new_password2
    Register:
      type: object
      properties:
        username:
          type: string
          maxLength: 150
          minLength: 1
        email:
          type: string
          format: email
        password1:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
      required:
      - username
      - password1
      - password2
    VerifyEmail:
      type: object
      properties:
        key:
          type: string
          writeOnly: true
      required:
      - key
    ResendEmailVerification:
      type: object
      properties:
        email:
          type: string
          format: email
